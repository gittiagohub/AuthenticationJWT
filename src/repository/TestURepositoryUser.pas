unit TestURepositoryUser;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, UModelUser, System.JSON, URepositoryUser,UConfig;
   var
    FJsonArrayUsers: TJSONArray;
type
  // Test methods for class TRepositoryUser

  TestTRepositoryUser = class(TTestCase)
  strict private
    FRepositoryUser: TRepositoryUser;

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published

    procedure TestInsert;
    procedure TestgetByEmail;
    procedure TestGet;
    procedure TestUpdate;
    procedure TestGet1;
    procedure TestDelete;
  end;

implementation

uses
  System.SysUtils,UUtils;

procedure TestTRepositoryUser.SetUp;
begin
  TConfig.LoadVariables;
  FRepositoryUser := TRepositoryUser.Create;
end;

procedure TestTRepositoryUser.TearDown;
begin
  FRepositoryUser.Free;
  FRepositoryUser := nil;
end;

procedure TestTRepositoryUser.TestgetByEmail;
var
  ReturnValue: TUser;
  aFieldsToReturn: array of string;
  aEmail: string;
begin
  // TODO: Setup method call parameters
  aEmail:= 'teste@gmail.com';
  ReturnValue := FRepositoryUser.getByEmail(aEmail, aFieldsToReturn);
   CheckEquals(ReturnValue.email, aEmail,
     'Falha no TestgetByEmail. Email diferente');
   CheckEquals(ReturnValue.username, 'Teste',
     'Falha no TestgetByEmail. username diferente');
   CheckEquals(ReturnValue.fullname, 'Teste da silva montalvão',
     'Falha no TestgetByEmail. fullname diferente');
   CheckNotEquals(ReturnValue.password, '0123456789',
     'Falha no TestgetByEmail. password diferente');
   CheckEquals(ReturnValue.birthdate, StrToDateTime('28/09/1991'),
     'Falha no TestgetByEmail. birthdate diferente');

  aEmail:= 'teste2@gmail.com';
  ReturnValue := FRepositoryUser.getByEmail(aEmail, aFieldsToReturn);
  CheckEquals(ReturnValue.email,aEmail,'Falha no TestgetByEmail. Email diferente' );

  aEmail:= 'teste3@gmail.com';
  ReturnValue := FRepositoryUser.getByEmail(aEmail, aFieldsToReturn);
  CheckEquals(ReturnValue.email,aEmail,'Falha no TestgetByEmail. Email diferente');

  aEmail:= 'naoexiste@gmail.com';
  ReturnValue := FRepositoryUser.getByEmail(aEmail, aFieldsToReturn);
  CheckEquals(ReturnValue.id,0,'Falha no TestgetByEmail. Não deve existir o email naoexiste@gmail.com');
  // TODO: Validate method results
end;

procedure TestTRepositoryUser.TestInsert;
var
  ReturnValue: TResult;
  aJSON: TJSONArray;
begin
   // TODO: Setup method call parameters

   aJSON := TJSONArray.Create;
   aJSON.AddElement(TJSONObject.Create
     .AddPair('username','Teste')
     .AddPair('fullname','Teste da silva montalvão')
     .AddPair('email','teste@gmail.com')
     .AddPair('password','0123456789')
     .AddPair('birthdate','1991-09-28'));

   ReturnValue := FRepositoryUser.Insert(aJSON);

   CheckEquals(ReturnValue.HTTPStatus, 200,
     'Falha no TestInsert de Usuário. HTTPStatus <> 200 ');
   CheckTrue(ReturnValue.OK,
     'Falha no TestInsert de Usuário. retorno.ok <> True ');

   // Não deve inserir repetido
   ReturnValue := FRepositoryUser.Insert(aJSON);

   CheckEquals(ReturnValue.HTTPStatus, 500,
     'Falha no TestInsert de Usuário. HTTPStatus <> 500 ');
   CheckFalse(ReturnValue.OK,
     'Falha no TestInsert de Usuário. retorno.ok <> False ');
   CheckTrue(pos('ERRO: duplicar valor da chave viola a restrição de unicidade',
     ReturnValue.MsgError) > 0,
     'Falha no TestInsert de Usuário. retorno.ok <> False ');

   aJSON.Remove(0).Free;

   aJSON.AddElement(TJSONObject.Create
     .AddPair('username','Teste2')
     .AddPair('fullname','Teste2 da silva montalvão')
     .AddPair('email','teste2@gmail.com')
     .AddPair('password','0123456789')
     .AddPair('birthdate','1991-09-28'));

   aJSON.AddElement(TJSONObject.Create
     .AddPair('username', 'Teste3')
     .AddPair('fullname', 'Teste3 da silva montalvão')
     .AddPair('email','teste3@gmail.com')
     .AddPair('password','0123456789')
     .AddPair('birthdate','1991-09-28'));

   ReturnValue := FRepositoryUser.Insert(aJSON);

   CheckEquals(ReturnValue.HTTPStatus, 200,
     'Falha no TestInsert de Usuário. HTTPStatus <> 200 ');
   CheckTrue(ReturnValue.OK,
     'Falha no TestInsert de Usuário. retorno.ok <> true ');

   // TODO: Validate method results
end;

procedure TestTRepositoryUser.TestUpdate;
var
  ReturnValue: TResult;
  aJSON: TJSONObject;
  i: Integer;
  Xusername : String;
begin
   for i  := 0 to FJsonArrayUsers.Count -1 do
   begin
      TJSONObject(FJsonArrayUsers.Items[i]).RemovePair('username');
      TJSONObject(FJsonArrayUsers.Items[i]).AddPair('username','name'+i.ToString());

      TJSONObject(FJsonArrayUsers.Items[i]).RemovePair('password');
      TJSONObject(FJsonArrayUsers.Items[i]).AddPair('password','0123456789');

      ReturnValue:=  FRepositoryUser.Update(TJSONObject(FJsonArrayUsers.Items[i]));
      CheckEquals(ReturnValue.HTTPStatus, 200,
        'Falha no TestInsert de Usuário. HTTPStatus <> 200 ');
      CheckTrue(ReturnValue.OK,
        'Falha no TestInsert de Usuário. retorno.ok <> true ');

   end;

   ReturnValue := FRepositoryUser.Get();

   for I := 0 to ReturnValue.JSONArray.Count -1 do
   begin
       CheckEquals(TJSONObject(ReturnValue.JSONArray.Items[i])
         .GetValue<String>('username'), 'name' + i.ToString(),
         'Falha no TestUpdate. username não atualizado');
   end;
end;

procedure TestTRepositoryUser.TestGet;
var
  ReturnValue: TResult;
  I: Integer;
  XUser :TUser;
begin
   ReturnValue := FRepositoryUser.Get();

   FJsonArrayUsers := ReturnValue.JSONArray;

   CheckTrue(FJsonArrayUsers.Count > 0,
     'Falha no TestGet de Usuário. Array de usuários não pode ser zero');
   CheckEquals(ReturnValue.HTTPStatus, 200,
     'Falha no TestInsert de Usuário. HTTPStatus <> 200 ');
   CheckTrue(ReturnValue.OK,
     'Falha no TestInsert de Usuário. retorno.ok <> true ');
end;

procedure TestTRepositoryUser.TestGet1;
var
  ReturnValue: TResult;
  aValue: Variant;
  aField: string;
begin
   aField :='email';
   aValue := 'teste3@gmail.com';
   ReturnValue := FRepositoryUser.Get(aField, aValue);

   CheckEquals(ReturnValue.JSONArray.Count, 1,
     'Falha no TestGet1 de Usuário. get por email deve retornar 1');

   CheckEquals(TJSONObject(ReturnValue.JSONArray.Items[0])
     .GetValue<String>('email'), aValue,
     'Falha no TestGet1 de Usuário. email diferente do buscado.');

end;

procedure TestTRepositoryUser.TestDelete;
var
  ReturnValue: TResult;
  aValue: string;
  aField: string;
begin
   aField :='email';

   aValue := 'teste3@gmail.com';
   ReturnValue := FRepositoryUser.Delete(aField, aValue);

   CheckEquals(ReturnValue.HTTPStatus, 204,
     'Falha no TestDelete de Usuário. HTTPStatus <> 204 ');
   CheckTrue(ReturnValue.OK,
     'Falha no TestDelete de Usuário. retorno.ok <> true ');

   aValue := 'teste2@gmail.com';
   ReturnValue := FRepositoryUser.Delete(aField, aValue);

   CheckEquals(ReturnValue.HTTPStatus, 204,
     'Falha no TestDelete de Usuário. HTTPStatus <> 204 ');
   CheckTrue(ReturnValue.OK,
     'Falha no TestDelete de Usuário. retorno.ok <> true ');

   aValue := 'teste@gmail.com';
   ReturnValue := FRepositoryUser.Delete(aField, aValue);

   CheckEquals(ReturnValue.HTTPStatus, 204,
     'Falha no TestDelete de Usuário. HTTPStatus <> 204 ');
   CheckTrue(ReturnValue.OK,
     'Falha no TestDelete de Usuário. retorno.ok <> true ');
end;

initialization

//                     fazer diretiva pra pegar as configurações de de teste do arquivo
// Register any test cases with the test runner
RegisterTest(TestTRepositoryUser.Suite);

end.
